// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String     @default(uuid()) @id
  email    String  @unique
  name     String
  password String
  tokens RefreshToken[]
  roleId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role Role @relation(fields: [roleId], references: [id])
}

model Role {
  id   String @id @default(uuid())
  name String @unique
  users User[]
}

model RefreshToken {
  id String @default(uuid()) @id
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  token String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model App {
  id          String  @id @default(uuid())
  name        String 
  platformId  String  
  packageName String? 
  sha256      String?
  bundleId    String?
  teamId      String?
  baseUrl     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  platform PlatformType @relation(fields: [platformId], references: [id], onDelete: Cascade)
  dynamicLinks DynamicLinkApp[]
}

model PlatformType {
  id   String  @id @default(uuid())
  name String  @unique
  apps App[]
}

model Domain {
  id          String  @id @default(uuid()) 
  name        String  @unique 
  scheme      String  
  host        String 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  links       DynamicLink[]
}
model DynamicLink {
  id           String   @id @default(uuid()) 
  domainId     String   
  slug         String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isListed     Boolean  @default(true)

  domain       Domain  @relation(fields: [domainId], references: [id], onDelete: Cascade)
  apps         DynamicLinkApp[]
}

model DynamicLinkApp {
  id           String  @id @default(uuid()) 
  dynamicLinkId String 
  appId        String 
  destination  String 
  fallbackUrl  String?

  dynamicLink  DynamicLink @relation(fields: [dynamicLinkId], references: [id], onDelete: Cascade)
  app          App @relation(fields: [appId], references: [id], onDelete: Cascade)
}